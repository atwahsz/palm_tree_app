# palm_disease_app_mobilevit.py

import streamlit as st
from PIL import Image
import torch
import timm
import numpy as np
from torchvision import transforms
import os
import requests
from io import BytesIO

# ##############
# ุชููุฆุฉ ุงููููุฐุฌ ูุชุญูููู ูู ุงูุฑุงุจุท
# ##############
@st.cache_resource
def download_model(url, model_path):
    """
    ุชุญููู ุงููููุฐุฌ ูู ุฑุงุจุท GitHub ูุญูุธู ูุญูููุง.
    
    Parameters:
        url (str): ุฑุงุจุท ุงููููุฐุฌ ุนูู GitHub
        model_path (str): ุงููุณุงุฑ ุงููุญูู ูุญูุธ ุงููููุฐุฌ
    
    Returns:
        None
    """
    if not os.path.exists(model_path):
        st.info("ุฌุงุฑู ุชุญููู ุงููููุฐุฌุ ูุฑุฌู ุงูุงูุชุธุงุฑ...")
        response = requests.get(url)
        if response.status_code == 200:
            with open(model_path, 'wb') as f:
                f.write(response.content)
            st.success("ุชู ุชุญููู ุงููููุฐุฌ ุจูุฌุงุญ!")
        else:
            st.error("ูุดู ูู ุชุญููู ุงููููุฐุฌ. ูุฑุฌู ุงูุชุญูู ูู ุงูุฑุงุจุท ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
            st.stop()

@st.cache_resource
def load_model(model_path, num_labels):
    """
    ุชุญููู ูููุฐุฌ MobileViT ุงููุฏุฑุจ ูุณุจููุง.
    
    Parameters:
        model_path (str): ูุณุงุฑ ููู ุงููููุฐุฌ .pth
        num_labels (int): ุนุฏุฏ ุงููุฆุงุช

    Returns:
        model: ูููุฐุฌ MobileViT ููุญููู
    """
    model = timm.create_model('mobilevit_xxs', pretrained=False, num_classes=num_labels)
    model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
    model.eval()
    return model

# ุชุนุฑูู ุฃุณูุงุก ุงููุฆุงุช ูุฎุทุท ุงูุนูุงุฌ
CLASS_NAMES = [
    'ููุต ุงูุจูุชุงุณููู',
    'ููุต ุงูููุบููุฒ',
    'ููุต ุงููุบููุณููู',
    'ุงูุญุฑู ุงูุฃุณูุฏ',
    'ุจูุน ุงูุฃูุฑุงู',
    'ุฐุจูู ุงููููุฒุงุฑููู',
    'ููุญุฉ ุงูุณุนู',
    'ุญุดุฑุฉ ุจูุงูุดุงุฑุฏ ุงููุดุฑูุฉ',
    'ุนููุฉ ุณูููุฉ'
]

ADVICE_DICT = {
    'ููุต ุงูุจูุชุงุณููู': 'ุงุณุชุฎุฏุงู ุฃุณูุฏุฉ ุชุญุชูู ุนูู ูุณุจุฉ ุนุงููุฉ ูู ุงูุจูุชุงุณููู (ูุซู ุณููุงุช ุงูุจูุชุงุณููู) ูุชุทุจูููุง ุจุงูุชุธุงู. ุชุญุณูู ุชุตุฑูู ุงูุชุฑุจุฉ ูุถูุงู ุนุฏู ููุฏุงู ุงูุนูุงุตุฑ ุงูุบุฐุงุฆูุฉ.',
    'ููุต ุงูููุบููุฒ': 'ุชุญุณูู ุงูุชุฑุจุฉ ุจุงุณุชุฎุฏุงู ุฃุณูุฏุฉ ุชุญุชูู ุนูู ุงูููุบููุฒ ูุซู ุณููุงุช ุงูููุบููุฒ. ุชุนุฏูู ูุณุชูู ุงูุญููุถุฉ ูู ุงูุชุฑุจุฉ (pH) ูุฌุนู ุงูุนูุงุตุฑ ุงูุบุฐุงุฆูุฉ ูุชุงุญุฉ ูููุจุงุช.',
    'ููุต ุงููุบููุณููู': 'ุฅุถุงูุฉ ุฃุณูุฏุฉ ุชุญุชูู ุนูู ุงููุบููุณููู ูุซู ูุจุฑูุชุงุช ุงููุบููุณููู. ุงูุชุฃูุฏ ูู ุชูุงุฒู ุงูุนูุงุตุฑ ุงูุบุฐุงุฆูุฉ ูู ุงูุชุฑุจุฉ.',
    'ุงูุญุฑู ุงูุฃุณูุฏ': 'ุงุณุชุฎุฏุงู ูุจูุฏุงุช ุงููุทุฑูุงุช ุงูููุงุณุจุฉ ูุซู ุชูู ุงูุชู ุชุญุชูู ุนูู ุงููุงูููุฒูุจ ุฃู ุงููุงุฑุจูุฏุงุฒูู. ุฅุฒุงูุฉ ุงูุฃูุฑุงู ุงููุตุงุจุฉ ูุชูููู ุงูุชุดุงุฑ ุงูุนุฏูู.',
    'ุจูุน ุงูุฃูุฑุงู': 'ุชุทุจูู ูุจูุฏุงุช ุงููุทุฑูุงุช ูุซู ุชูู ุงูุชู ุชุญุชูู ุนูู ุงููููุฑูุซุงููููู. ุชุฌูุจ ุงูุฑู ุงูุฒุงุฆุฏ ูุถูุงู ุงูุชูููุฉ ุงูุฌูุฏุฉ ุจูู ุงูุฃุดุฌุงุฑ.',
    'ุฐุจูู ุงููููุฒุงุฑููู': 'ุฅุฒุงูุฉ ูุชุฏููุฑ ุงููุจุงุชุงุช ุงููุตุงุจุฉ. ุงุณุชุฎุฏุงู ูุจูุฏุงุช ูุทุฑูุงุช ูุนุงูุฉ ูุซู ุชูู ุงูุชู ุชุญุชูู ุนูู ุงูุซูููุงูุงุช-ููุซูู. ุชุญุณูู ุงูุชุตุฑูู ูููุน ุงูุชุดุงุฑ ุงูุนุฏูู.',
    'ููุญุฉ ุงูุณุนู': 'ุฑุด ุงูุฃุดุฌุงุฑ ุจูุจูุฏุงุช ุงููุทุฑูุงุช ุงูููุงุณุจุฉ. ุชูููู ุงูุฃุฌุฒุงุก ุงููุตุงุจุฉ ูุชุญุณูู ุชูููุฉ ุงูุดุฌุฑุฉ.',
    'ุญุดุฑุฉ ุจูุงูุดุงุฑุฏ ุงููุดุฑูุฉ': 'ุงุณุชุฎุฏุงู ุงููุจูุฏุงุช ุงูุญุดุฑูุฉ ุงูููุงุณุจุฉ ูุซู ุงูุฒููุช ุงููุนุฏููุฉ ุฃู ุงููููุฑุจูุฑูููุณ. ูุฑุงูุจุฉ ุงูุฃุดุฌุงุฑ ุจุงูุชุธุงู ููุณูุทุฑุฉ ุนูู ุชูุดู ุงูุขูุงุช.',
    'ุนููุฉ ุณูููุฉ': 'ุงูุญูุงุธ ุนูู ููุงุฑุณุงุช ุฒุฑุงุนูุฉ ุฌูุฏุฉ ุชุดูู ุงูุฑู ูุงูุชุณููุฏ ุงูููุชุธูููุ ูุงูุชุฃูุฏ ูู ุงูุชุตุฑูู ุงูุฌูุฏุ ููุฑุงูุจุฉ ุธููุฑ ุฃู ุฃุนุฑุงุถ ุนูู ุงูุฃุดุฌุงุฑ ุจุงูุชุธุงู.'
}

# ูุณุงุฑ ุงููููุฐุฌ ุงููุญูู
MODEL_URL = "https://github.com/atwahsz/palm_tree_app/raw/refs/heads/main/best_mobilevit_palm_disease.pth"
MODEL_DIR = "model_outputs"
MODEL_NAME = "best_mobilevit_palm_disease.pth"
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_NAME)

# ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงููุฌูุฏ
os.makedirs(MODEL_DIR, exist_ok=True)

# ุชุญููู ุงููููุฐุฌ ูู ุงูุฑุงุจุท ุฅุฐุง ูู ููู ููุฌูุฏูุง
download_model(MODEL_URL, MODEL_PATH)

# ุชุญููู ุงููููุฐุฌ
NUM_LABELS = len(CLASS_NAMES)
model = load_model(MODEL_PATH, NUM_LABELS)

# ##############
# ุชุนุฑูู ุงูุฏูุงู
# ##############
def preprocess_image(image):
    """
    ูุนุงูุฌุฉ ุงูุตูุฑุฉ ุงููุฏุฎูุฉ ูุชููู ููุงุณุจุฉ ูููููุฐุฌ MobileViT.
    
    Parameters:
        image (PIL.Image): ุงูุตูุฑุฉ ุงููุฏุฎูุฉ
    
    Returns:
        torch.Tensor: ุงูุตูุฑุฉ ุงููุนุงูุฌุฉ
    """
    preprocess = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],  # ูุชูุณุท ImageNet
                             std=[0.229, 0.224, 0.225])   # ุงูุญุฑุงู ImageNet
    ])
    return preprocess(image).unsqueeze(0)  # ุฅุถุงูุฉ ุจุนุฏ ุงูุฏูุนุฉ

def predict(image, model, class_names):
    """
    ุฅุฌุฑุงุก ุงูุชูุจุค ุจุงููุฆุฉ ุจูุงุกู ุนูู ุงูุตูุฑุฉ ุงููุฏุฎูุฉ.
    
    Parameters:
        image (PIL.Image): ุงูุตูุฑุฉ ุงููุฏุฎูุฉ
        model: ูููุฐุฌ MobileViT ุงูููุญููู
        class_names (list): ูุงุฆูุฉ ุจุฃุณูุงุก ุงููุฆุงุช
    
    Returns:
        predicted_class (str): ุงููุฆุฉ ุงููุชููุนุฉ
        confidence (float): ุฏุฑุฌุฉ ุงูุซูุฉ
    """
    input_tensor = preprocess_image(image)
    with torch.no_grad():
        outputs = model(input_tensor)
        probabilities = torch.softmax(outputs, dim=1)
        confidence, predicted_class = torch.max(probabilities, dim=1)
    return class_names[predicted_class.item()], confidence.item()

def get_advice(class_name):
    """
    ุงูุญุตูู ุนูู ุฎุทุฉ ุงูุนูุงุฌ ุจูุงุกู ุนูู ุงููุฆุฉ ุงููุชููุนุฉ.
    
    Parameters:
        class_name (str): ุงุณู ุงููุฆุฉ
    
    Returns:
        str: ุฎุทุฉ ุงูุนูุงุฌ
    """
    return ADVICE_DICT.get(class_name, 'ูุง ุชูุฌุฏ ูุตูุญุฉ ูุชุงุญุฉ ููุฐู ุงููุฆุฉ.')

# ##############
# ูุงุฌูุฉ ุงูุชุทุจูู
# ##############
st.set_page_config(page_title="๐ท ุชุดุฎูุต ุฃูุฑุงุถ ุฃุดุฌุงุฑ ุงููุฎูู", layout="centered")

st.title("๐ท ุชุทุจูู ุชุดุฎูุต ุฃูุฑุงุถ ุฃุดุฌุงุฑ ุงููุฎูู")

st.write("""
    ูุฐุง ุงูุชุทุจูู ูุณุชุฎุฏู ูููุฐุฌ ุชุนูู ุนููู ูุชุดุฎูุต ุฃูุฑุงุถ ุฃุดุฌุงุฑ ุงููุฎูู ูู ุฎูุงู ุตูุฑุฉ ูุชู ุชุญููููุง.
    ูุฑุฌู ุงูุชูุงุท ุตูุฑุฉ ูุงุถุญุฉ ูุฃูุฑุงู ุงููุฎูู ูุชุญููููุง ุฃุฏูุงู.
""")

# ุชุญููู ุงูุตูุฑุฉ
uploaded_file = st.file_uploader("ุงุฎุชุฑ ุตูุฑุฉ ููุฑูุฉ ุงููุฎูู", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='ุงูุตูุฑุฉ ุงููุญููุฉ', use_column_width=True)
    
    if st.button('๐ ุชุดุฎูุต'):
        with st.spinner('ุฌุงุฑู ุงูุชุดุฎูุต...'):
            predicted_class, confidence = predict(image, model, CLASS_NAMES)
            st.success(f"โ **ุงูุชุดุฎูุต:** {predicted_class}")
            st.info(f"๐ **ุฏุฑุฌุฉ ุงูุซูุฉ:** {confidence*100:.2f}%")
            
            advice = get_advice(predicted_class)
            st.write("### ๐ **ุฎุทุฉ ุงูุนูุงุฌ ุงูููุตู ุจูุง:**")
            st.write(advice)
else:
    st.write("ูุฑุฌู ุชุญููู ุตูุฑุฉ ูุจุฏุก ุนูููุฉ ุงูุชุดุฎูุต.")

# ##############
# ููุงุญุธุงุช ุฅุถุงููุฉ
# ##############
st.markdown("""
---
**ููุงุญุธุฉ:** ุชู ุชุญููู ุงููููุฐุฌ `best_mobilevit_palm_disease.pth` ูู GitHub ูุญูุธู ูู ุงููุฌูุฏ `model_outputs/`. ุฅุฐุง ููุช ุชุฑุบุจ ูู ุชุญุฏูุซ ุงููููุฐุฌุ ููููู ุงุณุชุจุฏุงู ุงูููู ุงููุญููุธ ุจุขุฎุฑ ุฌุฏูุฏ.
""")
